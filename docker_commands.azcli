
###############

$acrName = "myacr"
az acr repository list -n $acrName --output table

$acrServer = ac acr show -n $acrName --query loginServer --output tsv

$acrPassword = az acr credentials show -n $acrName --query "passwords[0].value" -o tsv

$resourceGroup = "myrg"

$location = "westeurope"

az group create -n $resourceGroup -l $location

$storageAccountName = "mystorage123alex"

az storage account create -g $resourceGroup -n $storageAccountName --sku Standard_LRS

$storageConnectionString = az storage account show-connection-string -n $storageAccountName -g $resourceGroup --query connectionString -o tsv

$env:AZURE_STORAGE_CONNECTION_STRING = $storageConnectionString

$shareName = "myshare"

az storage share create -n $shareName

$storageKey = $(az storage account keys list -g $resourceGroup --account-name $storageAccountName --query "[0].value" --output tsv)

$containerGroupName = "mycgn"

az container create -g $resourceGroup 
    -n $containerGroupName
    --image $acrServer/samplewebapp:v2
    --cpu 1 --memory 1
    --registry-username $acrName
    --registry-password $acrPassword
    --azure-file-volume-account-name $storageAccountName
    --azure-file-volume-account-key $storageKey
    --azure-file-volume-mount-path "/home"
    -e TestSetting = FromAzCli TestFileLocation = /home/message.txt
    --dns-name-label "aciacr1" --ports 80

az container exec -n $containerGroupName -g $resourceGroup --exec-command sh
    echo "hello" > /home/message.txt

az storage file list -s $shareName -o table

az group delete -n $resourceGroup -y

######################################
# Running containers on web app for containers
$resourceGroup = "myrg"

$location = "westeurope"

az group create -n $resourceGroup -l $location

$planname = "wordpressplan"

az appservice plan create -n $planname -g $resourcegroup -l $location --is-linux --sku S1

$mysqlservername = "mysql"

$adminuser = "alex"

$adminpassword = "mypassword"

az mysql server create -g $resourceGroup -n $mysqlservername --admin-user $adminuser --admin-password $adminpassword -l $location --ssl-enforcement disabled --sku-name GP_Gen5_2 --version 5.7

az mysql server firewall-rule create -g $resourceGroup --server $mysqlservername --name Allowappservice --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0

$appName = "wordpress-a"

$dockerrepo = "wordpress"

az webapp create -n $appName -g $resourceGroup --plan $planname -i $dockerrepo

$wordpressDbHost = (az mysql server show -g $resourceGroup -n $mysqlservername --query "fullyQualifiedDomainName" -o tsv)

az webapp config appsettings set -n $appname -g $resourceGroup --settings WORDPRESS_DB_HOST = $wordpressDbHost WORDPRESS_DB_USER = "$adminuser@$mysqlservername" WORDPRESS_DB_PASSWORD = "$adminpassword"

az webappshow -n $appName -g $resourceGroup --query "defaultHostName" -o tsv

# scaling out

az appservice plan update -n $planname -g $resourcegroup --number-of-workers 3

az group delete --name $resourcegroup --yes --no-wait

####################################
# Service fabric tools installed from visual studio

#demo in visual studio

#####################################
# kubernetes
$resourceGroup = "myrg"

$location = "westeurope"

az group create -n $resourceGroup -l $location

$clustername = "mycluster"

az group create -n $resourcegroup -n $clustername --node-count 1 --generate-ssh-keys

kubectl version --short

az aks get-credentials -g $resourcegroup -n $clustername

kubectl get nodes

kubectl apply -f sample-app.yaml

kubectl get service samplewebapp --watch

kubectl get pod

kubectl logs sampleapp-xxx

az aks scale -g $resourcegroup -n $clustername --node-count 3

kubectl get nodes

kubectl apply -f example-vote.yml


markheath/azure-deploy-manage-containers




# For accessing the bash console in 
interactive mode
docker run -it alpine:3.7 sh

# For 
docker exec -it <<id_docker>> sh # for getting into docker
